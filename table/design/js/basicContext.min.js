var BasicContext = function() {
    this.flag = false;
}
BasicContext.prototype.show = function(items, e, isRightClick) {
    
    if(isRightClick) {
        this.flag = true;
    } else {
        this.flag = false;
    }
    
    if(basicContext.exist()) {
        var container = document.querySelector('.basicContextContainer');
        container.parentElement.removeChild(container);
        var fnClose = basicContext.close;
        $(document).unbind("click", fnClose); 
        $(document).unbind("contextmenu", fnClose); 
    }
    
	// Build context
	var html = this.build(items);

	// Add context to the body
	document.body.insertAdjacentHTML('beforeend', html);
    
	// Cache the context
	var context = document.querySelector('.basicContext');

	// Calculate position
	var position = this.getPosition(e, context);

	// Set position
	context.style.left            = position.x + "px";
	context.style.top             = position.y + "px";
	context.style.opacity         = 1;

	// Close fn fallback
	var fnClose = this.close;

	// Bind click on background
    $(document).bind("click", fnClose); 
    $(document).bind("contextmenu", fnClose); 
	//context.parentElement.onclick       = fnClose
	//context.parentElement.oncontextmenu = fnClose
    $(".basicContext__data").unbind("click").click(function() {
         var dataNum = $(this).attr("data-num");
         var item = items[dataNum];
         if(item.fn) {
             item.fn(item);
         }
    });
    
    $(".basicContext__data_del").unbind("click").click(function() {
         var dataNum = $(this).attr("data-num");
         var item = items[dataNum];
         if(item.dfn) {
             item.dfn(item);
         }
    });

	// Bind click on items
	//items.forEach(bind)

	// Do not trigger default event or further propagation
	if (typeof e.preventDefault === 'function')  e.preventDefault()
	if (typeof e.stopPropagation === 'function') e.stopPropagation()
    
	return true

}

BasicContext.prototype.build = function(items) {
	var html = ""
	html += "<div class='basicContextContainer'>"
	      +     "<div class='basicContext'>"
	      +         "<table>"
	      +            "<tbody>";
    for(var i = 0; i < items.length; i++) {
        html += this.buildItem(items[i], i);
        
    }
	html += "     </tbody>"
	     +     "</table>"
 	     +    "</div>"
	     + "</div>"
	return html
}

BasicContext.prototype.buildItem = function(item, i) {
	var html = '',
	    span = ''

	item.num = i;
	if (item.icon) {
        span = "<span class='" + item.icon + "\'></span>";
    }
	if (item.type=="SEPARATOR") {
		html = "<tr class='basicContext__item basicContext__item--separator'></tr>";
	} else {
        html = "<tr class='basicContext__item " + item.class + "'>"
		     + "<td class='basicContext__data' data-num='" + item.num + "'>" + span + item.title + "</td>";
        if(item.del) {
            html += "<td class='basicContext__data_del' data-num='" + item.num + "'><i class='icon iconfont icon-delete icon-size-12'></i></td>";
        }
		html +="</tr>";
    }

	return html
}

BasicContext.prototype.getPosition = function(e, context) {

	// Get the click position
	var normalizedEvent = this.getNormalizedEvent(e);

	// Set the initial position
	var x = normalizedEvent.x,
	    y = normalizedEvent.y;

	// Get size of browser
	var browserSize = {
		width  : window.innerWidth,
		height : window.innerHeight
	}

	// Get size of context
	var contextSize = {
		width  : context.offsetWidth,
		height : context.offsetHeight
	}

	// Fix position based on context and browser size
	if ((x + contextSize.width) > browserSize.width)   x = x - ((x + contextSize.width) - browserSize.width)
	if ((y + contextSize.height) > browserSize.height) y = y - ((y + contextSize.height) - browserSize.height)

	// Make context scrollable and start at the top of the browser
	// when context is higher than the browser
	if (contextSize.height > browserSize.height) {
		y = 0
		context.classList.add('basicContext--scrollable')
	}

	// Calculate the relative position of the mouse to the context
	var rx = normalizedEvent.x - x,
	    ry = normalizedEvent.y - y;

	return { x, y, rx, ry }

}

BasicContext.prototype.getNormalizedEvent=function(e) {
	var pos = {
		x : e.clientX,
		y : e.clientY
	}

	// Position unknown
	if (pos.x==null || pos.x < 0) pos.x = 0
	if (pos.y==null || pos.y < 0) pos.y = 0

	return pos

}

BasicContext.prototype.exist = function() {
	var elem = document.querySelector('.basicContext');

	if (elem==null || elem.length==0) return false
	else  return true
}

BasicContext.prototype.close = function(e) {
    if(!basicContext.exist() || !basicContext.flag) {
        basicContext.flag = true;
        return false;
    }
	var container = document.querySelector('.basicContextContainer')
	container.parentElement.removeChild(container)
    var fnClose = basicContext.close;
    $(document).unbind("click", fnClose); 
    $(document).unbind("contextmenu", fnClose); 
    
	return true;
}

var basicContext = new BasicContext();